// Mocks generated by Mockito 5.2.0 from annotations
// in provenance_dart/test/wallet_connect/relay_client_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:io' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:provenance_dart/src/wallet_connect/messages.dart' as _i2;
import 'package:provenance_dart/src/wallet_connect/relay_client.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEncryptionPayload_0 extends _i1.Fake
    implements _i2.EncryptionPayload {}

class _FakeJsonRpcBase_1 extends _i1.Fake implements _i2.JsonRpcBase {}

class _FakeStreamSubscription_2<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

/// A class which mocks [RelayEncryptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRelayEncryptionService extends _i1.Mock
    implements _i4.RelayEncryptionService {
  MockRelayEncryptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.EncryptionPayload> encrypt(_i2.JsonRpcBase? request) =>
      (super.noSuchMethod(Invocation.method(#encrypt, [request]),
              returnValue: Future<_i2.EncryptionPayload>.value(
                  _FakeEncryptionPayload_0()))
          as _i3.Future<_i2.EncryptionPayload>);
  @override
  _i3.Future<_i2.JsonRpcBase> decrypt(
          _i2.EncryptionPayload? encryptionPayload) =>
      (super.noSuchMethod(Invocation.method(#decrypt, [encryptionPayload]),
              returnValue: Future<_i2.JsonRpcBase>.value(_FakeJsonRpcBase_1()))
          as _i3.Future<_i2.JsonRpcBase>);
}

/// A class which mocks [RelayClientDelegate].
///
/// See the documentation for Mockito's code generation for more information.
class MockRelayClientDelegate extends _i1.Mock
    implements _i4.RelayClientDelegate {
  MockRelayClientDelegate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onSubscription(String? topic) =>
      super.noSuchMethod(Invocation.method(#onSubscription, [topic]),
          returnValueForMissingStub: null);
  @override
  void onPublish(String? topic, _i2.JsonRpcBase? jsonRpc) =>
      super.noSuchMethod(Invocation.method(#onPublish, [topic, jsonRpc]),
          returnValueForMissingStub: null);
  @override
  void onClose() => super.noSuchMethod(Invocation.method(#onClose, []),
      returnValueForMissingStub: null);
  @override
  void onError(Exception? err) =>
      super.noSuchMethod(Invocation.method(#onError, [err]),
          returnValueForMissingStub: null);
}

/// A class which mocks [WebSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocket extends _i1.Mock implements _i5.WebSocket {
  MockWebSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set pingInterval(Duration? _pingInterval) =>
      super.noSuchMethod(Invocation.setter(#pingInterval, _pingInterval),
          returnValueForMissingStub: null);
  @override
  int get readyState =>
      (super.noSuchMethod(Invocation.getter(#readyState), returnValue: 0)
          as int);
  @override
  String get extensions =>
      (super.noSuchMethod(Invocation.getter(#extensions), returnValue: '')
          as String);
  @override
  bool get isBroadcast =>
      (super.noSuchMethod(Invocation.getter(#isBroadcast), returnValue: false)
          as bool);
  @override
  _i3.Future<int> get length => (super.noSuchMethod(Invocation.getter(#length),
      returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<bool> get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<dynamic> get first =>
      (super.noSuchMethod(Invocation.getter(#first),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> get last => (super.noSuchMethod(Invocation.getter(#last),
      returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> get single =>
      (super.noSuchMethod(Invocation.getter(#single),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> get done => (super.noSuchMethod(Invocation.getter(#done),
      returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> close([int? code, String? reason]) =>
      (super.noSuchMethod(Invocation.method(#close, [code, reason]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  void add(dynamic data) => super.noSuchMethod(Invocation.method(#add, [data]),
      returnValueForMissingStub: null);
  @override
  _i3.Future<dynamic> addStream(_i3.Stream<dynamic>? stream) =>
      (super.noSuchMethod(Invocation.method(#addStream, [stream]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  void addUtf8Text(List<int>? bytes) =>
      super.noSuchMethod(Invocation.method(#addUtf8Text, [bytes]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<dynamic> asBroadcastStream(
          {void Function(_i3.StreamSubscription<dynamic>)? onListen,
          void Function(_i3.StreamSubscription<dynamic>)? onCancel}) =>
      (super.noSuchMethod(
          Invocation.method(#asBroadcastStream, [],
              {#onListen: onListen, #onCancel: onCancel}),
          returnValue: Stream<dynamic>.empty()) as _i3.Stream<dynamic>);
  @override
  _i3.StreamSubscription<dynamic> listen(void Function(dynamic)? onData,
          {Function? onError, void Function()? onDone, bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_2<dynamic>())
          as _i3.StreamSubscription<dynamic>);
  @override
  _i3.Stream<dynamic> where(bool Function(dynamic)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
          returnValue: Stream<dynamic>.empty()) as _i3.Stream<dynamic>);
  @override
  _i3.Stream<S> map<S>(S Function(dynamic)? convert) =>
      (super.noSuchMethod(Invocation.method(#map, [convert]),
          returnValue: Stream<S>.empty()) as _i3.Stream<S>);
  @override
  _i3.Stream<E> asyncMap<E>(_i3.FutureOr<E> Function(dynamic)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncMap, [convert]),
          returnValue: Stream<E>.empty()) as _i3.Stream<E>);
  @override
  _i3.Stream<E> asyncExpand<E>(_i3.Stream<E>? Function(dynamic)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncExpand, [convert]),
          returnValue: Stream<E>.empty()) as _i3.Stream<E>);
  @override
  _i3.Stream<dynamic> handleError(Function? onError,
          {bool Function(dynamic)? test}) =>
      (super.noSuchMethod(
          Invocation.method(#handleError, [onError], {#test: test}),
          returnValue: Stream<dynamic>.empty()) as _i3.Stream<dynamic>);
  @override
  _i3.Stream<S> expand<S>(Iterable<S> Function(dynamic)? convert) =>
      (super.noSuchMethod(Invocation.method(#expand, [convert]),
          returnValue: Stream<S>.empty()) as _i3.Stream<S>);
  @override
  _i3.Future<dynamic> pipe(_i3.StreamConsumer<dynamic>? streamConsumer) =>
      (super.noSuchMethod(Invocation.method(#pipe, [streamConsumer]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Stream<S> transform<S>(
          _i3.StreamTransformer<dynamic, S>? streamTransformer) =>
      (super.noSuchMethod(Invocation.method(#transform, [streamTransformer]),
          returnValue: Stream<S>.empty()) as _i3.Stream<S>);
  @override
  _i3.Future<dynamic> reduce(dynamic Function(dynamic, dynamic)? combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<S> fold<S>(S? initialValue, S Function(S, dynamic)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: Future<S>.value(null)) as _i3.Future<S>);
  @override
  _i3.Future<String> join([String? separator = r'']) =>
      (super.noSuchMethod(Invocation.method(#join, [separator]),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(Invocation.method(#contains, [needle]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<dynamic> forEach(void Function(dynamic)? action) =>
      (super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<bool> every(bool Function(dynamic)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> any(bool Function(dynamic)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Stream<R> cast<R>() => (super.noSuchMethod(Invocation.method(#cast, []),
      returnValue: Stream<R>.empty()) as _i3.Stream<R>);
  @override
  _i3.Future<List<dynamic>> toList() =>
      (super.noSuchMethod(Invocation.method(#toList, []),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i3.Future<List<dynamic>>);
  @override
  _i3.Future<Set<dynamic>> toSet() =>
      (super.noSuchMethod(Invocation.method(#toSet, []),
              returnValue: Future<Set<dynamic>>.value(<dynamic>{}))
          as _i3.Future<Set<dynamic>>);
  @override
  _i3.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#drain, [futureValue]),
          returnValue: Future<E>.value(null)) as _i3.Future<E>);
  @override
  _i3.Stream<dynamic> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
          returnValue: Stream<dynamic>.empty()) as _i3.Stream<dynamic>);
  @override
  _i3.Stream<dynamic> takeWhile(bool Function(dynamic)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
          returnValue: Stream<dynamic>.empty()) as _i3.Stream<dynamic>);
  @override
  _i3.Stream<dynamic> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
          returnValue: Stream<dynamic>.empty()) as _i3.Stream<dynamic>);
  @override
  _i3.Stream<dynamic> skipWhile(bool Function(dynamic)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
          returnValue: Stream<dynamic>.empty()) as _i3.Stream<dynamic>);
  @override
  _i3.Stream<dynamic> distinct([bool Function(dynamic, dynamic)? equals]) =>
      (super.noSuchMethod(Invocation.method(#distinct, [equals]),
          returnValue: Stream<dynamic>.empty()) as _i3.Stream<dynamic>);
  @override
  _i3.Future<dynamic> firstWhere(bool Function(dynamic)? test,
          {dynamic Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#firstWhere, [test], {#orElse: orElse}),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> lastWhere(bool Function(dynamic)? test,
          {dynamic Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#lastWhere, [test], {#orElse: orElse}),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> singleWhere(bool Function(dynamic)? test,
          {dynamic Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#singleWhere, [test], {#orElse: orElse}),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> elementAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#elementAt, [index]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Stream<dynamic> timeout(Duration? timeLimit,
          {void Function(_i3.EventSink<dynamic>)? onTimeout}) =>
      (super.noSuchMethod(
          Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
          returnValue: Stream<dynamic>.empty()) as _i3.Stream<dynamic>);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
